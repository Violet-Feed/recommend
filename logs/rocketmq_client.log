{"msg":"create session success","level":"INFO","ts":"2025-04-30T19:40:40.8400159Z","peer":"localhost:8081","component":"session"}
{"msg":"start session success","level":"DEBG","ts":"2025-04-30T19:40:40.8652432Z","peer":"localhost:8081","component":"session"}
{"msg":"query route for topic=recommend","level":"DEBG","ts":"2025-04-30T19:40:40.8655449Z","component":"client"}
{"msg":"receive telemetry command: TelemetryCommand { status: Some(Status { code: Ok, message: \"OK\" }), command: Some(Settings(Settings { client_type: Some(SimpleConsumer), access_point: None, backoff_policy: Some(RetryPolicy { max_attempts: 17, strategy: Some(CustomizedBackoff(CustomizedBackoff { next: [Duration { seconds: 1, nanos: 0 }, Duration { seconds: 5, nanos: 0 }, Duration { seconds: 10, nanos: 0 }, Duration { seconds: 30, nanos: 0 }, Duration { seconds: 60, nanos: 0 }, Duration { seconds: 120, nanos: 0 }, Duration { seconds: 180, nanos: 0 }, Duration { seconds: 240, nanos: 0 }, Duration { seconds: 300, nanos: 0 }, Duration { seconds: 360, nanos: 0 }, Duration { seconds: 420, nanos: 0 }, Duration { seconds: 480, nanos: 0 }, Duration { seconds: 540, nanos: 0 }, Duration { seconds: 600, nanos: 0 }, Duration { seconds: 1200, nanos: 0 }, Duration { seconds: 1800, nanos: 0 }, Duration { seconds: 3600, nanos: 0 }, Duration { seconds: 7200, nanos: 0 }] })) }), request_timeout: Some(Duration { seconds: 3, nanos: 0 }), user_agent: Some(Ua { language: Rust, version: \"5.0.0\", platform: \"Windows 10.0.22631\", hostname: \"LAPTOP-IU7BKLKL\" }), metric: Some(Metric { on: false, endpoints: None }), pub_sub: Some(Subscription(Subscription { group: Some(Resource { resource_namespace: \"\", name: \"test\" }), subscriptions: [], fifo: Some(false), receive_batch_size: Some(32), long_polling_timeout: Some(Duration { seconds: 20, nanos: 0 }) })) })) }","level":"DEBG","ts":"2025-04-30T19:40:40.8659421Z","peer":"localhost:8081","component":"session"}
{"msg":"handle telemetry command failed: Failed to parse config at client.handle_telemetry_command => receive telemetry command but there is no handler\n\nContext:\n    command: Settings(Settings { client_type: Some(SimpleConsumer), access_point: None, backoff_policy: Some(RetryPolicy { max_attempts: 17, strategy: Some(CustomizedBackoff(CustomizedBackoff { next: [Duration { seconds: 1, nanos: 0 }, Duration { seconds: 5, nanos: 0 }, Duration { seconds: 10, nanos: 0 }, Duration { seconds: 30, nanos: 0 }, Duration { seconds: 60, nanos: 0 }, Duration { seconds: 120, nanos: 0 }, Duration { seconds: 180, nanos: 0 }, Duration { seconds: 240, nanos: 0 }, Duration { seconds: 300, nanos: 0 }, Duration { seconds: 360, nanos: 0 }, Duration { seconds: 420, nanos: 0 }, Duration { seconds: 480, nanos: 0 }, Duration { seconds: 540, nanos: 0 }, Duration { seconds: 600, nanos: 0 }, Duration { seconds: 1200, nanos: 0 }, Duration { seconds: 1800, nanos: 0 }, Duration { seconds: 3600, nanos: 0 }, Duration { seconds: 7200, nanos: 0 }] })) }), request_timeout: Some(Duration { seconds: 3, nanos: 0 }), user_agent: Some(Ua { language: Rust, version: \"5.0.0\", platform: \"Windows 10.0.22631\", hostname: \"LAPTOP-IU7BKLKL\" }), metric: Some(Metric { on: false, endpoints: None }), pub_sub: Some(Subscription(Subscription { group: Some(Resource { resource_namespace: \"\", name: \"test\" }), subscriptions: [], fifo: Some(false), receive_batch_size: Some(32), long_polling_timeout: Some(Duration { seconds: 20, nanos: 0 }) })) })\n","level":"ERRO","ts":"2025-04-30T19:40:40.8663918Z","component":"client"}
{"msg":"send heartbeat to server success, peer=localhost:8081","level":"DEBG","ts":"2025-04-30T19:40:40.8737371Z","component":"client"}
{"msg":"query route for topic=recommend success: route=Route { index: 0, queue: [MessageQueue { topic: Some(Resource { resource_namespace: \"\", name: \"recommend\" }), id: 0, permission: ReadWrite, broker: Some(Broker { name: \"broker-a\", id: 0, endpoints: Some(Endpoints { scheme: IPv4, addresses: [Address { host: \"172.20.0.47\", port: 8081 }] }) }), accept_message_types: [Normal] }, MessageQueue { topic: Some(Resource { resource_namespace: \"\", name: \"recommend\" }), id: 1, permission: ReadWrite, broker: Some(Broker { name: \"broker-a\", id: 0, endpoints: Some(Endpoints { scheme: IPv4, addresses: [Address { host: \"172.20.0.47\", port: 8081 }] }) }), accept_message_types: [Normal] }, MessageQueue { topic: Some(Resource { resource_namespace: \"\", name: \"recommend\" }), id: 2, permission: ReadWrite, broker: Some(Broker { name: \"broker-a\", id: 0, endpoints: Some(Endpoints { scheme: IPv4, addresses: [Address { host: \"172.20.0.47\", port: 8081 }] }) }), accept_message_types: [Normal] }, MessageQueue { topic: Some(Resource { resource_namespace: \"\", name: \"recommend\" }), id: 3, permission: ReadWrite, broker: Some(Broker { name: \"broker-a\", id: 0, endpoints: Some(Endpoints { scheme: IPv4, addresses: [Address { host: \"172.20.0.47\", port: 8081 }] }) }), accept_message_types: [Normal] }, MessageQueue { topic: Some(Resource { resource_namespace: \"\", name: \"recommend\" }), id: 4, permission: ReadWrite, broker: Some(Broker { name: \"broker-a\", id: 0, endpoints: Some(Endpoints { scheme: IPv4, addresses: [Address { host: \"172.20.0.47\", port: 8081 }] }) }), accept_message_types: [Normal] }, MessageQueue { topic: Some(Resource { resource_namespace: \"\", name: \"recommend\" }), id: 5, permission: ReadWrite, broker: Some(Broker { name: \"broker-a\", id: 0, endpoints: Some(Endpoints { scheme: IPv4, addresses: [Address { host: \"172.20.0.47\", port: 8081 }] }) }), accept_message_types: [Normal] }, MessageQueue { topic: Some(Resource { resource_namespace: \"\", name: \"recommend\" }), id: 6, permission: ReadWrite, broker: Some(Broker { name: \"broker-a\", id: 0, endpoints: Some(Endpoints { scheme: IPv4, addresses: [Address { host: \"172.20.0.47\", port: 8081 }] }) }), accept_message_types: [Normal] }, MessageQueue { topic: Some(Resource { resource_namespace: \"\", name: \"recommend\" }), id: 7, permission: ReadWrite, broker: Some(Broker { name: \"broker-a\", id: 0, endpoints: Some(Endpoints { scheme: IPv4, addresses: [Address { host: \"172.20.0.47\", port: 8081 }] }) }), accept_message_types: [Normal] }] }","level":"DEBG","ts":"2025-04-30T19:40:40.8941938Z","component":"client"}
{"msg":"update route for topic=recommend","level":"INFO","ts":"2025-04-30T19:40:40.8944344Z","component":"client"}
{"msg":"start simple consumer success, client_id: LAPTOP-IU7BKLKL@15808#0","level":"INFO","ts":"2025-04-30T19:40:40.8946585Z"}
{"msg":"create session success","level":"INFO","ts":"2025-04-30T19:40:40.8948283Z","peer":"172.20.0.47:8081","component":"session"}
{"msg":"start session success","level":"DEBG","ts":"2025-04-30T19:40:40.8986192Z","peer":"172.20.0.47:8081","component":"session"}
{"msg":"receive telemetry command: TelemetryCommand { status: Some(Status { code: Ok, message: \"OK\" }), command: Some(Settings(Settings { client_type: Some(SimpleConsumer), access_point: None, backoff_policy: Some(RetryPolicy { max_attempts: 17, strategy: Some(CustomizedBackoff(CustomizedBackoff { next: [Duration { seconds: 1, nanos: 0 }, Duration { seconds: 5, nanos: 0 }, Duration { seconds: 10, nanos: 0 }, Duration { seconds: 30, nanos: 0 }, Duration { seconds: 60, nanos: 0 }, Duration { seconds: 120, nanos: 0 }, Duration { seconds: 180, nanos: 0 }, Duration { seconds: 240, nanos: 0 }, Duration { seconds: 300, nanos: 0 }, Duration { seconds: 360, nanos: 0 }, Duration { seconds: 420, nanos: 0 }, Duration { seconds: 480, nanos: 0 }, Duration { seconds: 540, nanos: 0 }, Duration { seconds: 600, nanos: 0 }, Duration { seconds: 1200, nanos: 0 }, Duration { seconds: 1800, nanos: 0 }, Duration { seconds: 3600, nanos: 0 }, Duration { seconds: 7200, nanos: 0 }] })) }), request_timeout: Some(Duration { seconds: 3, nanos: 0 }), user_agent: Some(Ua { language: Rust, version: \"5.0.0\", platform: \"Windows 10.0.22631\", hostname: \"LAPTOP-IU7BKLKL\" }), metric: Some(Metric { on: false, endpoints: None }), pub_sub: Some(Subscription(Subscription { group: Some(Resource { resource_namespace: \"\", name: \"test\" }), subscriptions: [], fifo: Some(false), receive_batch_size: Some(32), long_polling_timeout: Some(Duration { seconds: 20, nanos: 0 }) })) })) }","level":"DEBG","ts":"2025-04-30T19:40:40.8990669Z","peer":"172.20.0.47:8081","component":"session"}
{"msg":"handle telemetry command failed: Failed to parse config at client.handle_telemetry_command => receive telemetry command but there is no handler\n\nContext:\n    command: Settings(Settings { client_type: Some(SimpleConsumer), access_point: None, backoff_policy: Some(RetryPolicy { max_attempts: 17, strategy: Some(CustomizedBackoff(CustomizedBackoff { next: [Duration { seconds: 1, nanos: 0 }, Duration { seconds: 5, nanos: 0 }, Duration { seconds: 10, nanos: 0 }, Duration { seconds: 30, nanos: 0 }, Duration { seconds: 60, nanos: 0 }, Duration { seconds: 120, nanos: 0 }, Duration { seconds: 180, nanos: 0 }, Duration { seconds: 240, nanos: 0 }, Duration { seconds: 300, nanos: 0 }, Duration { seconds: 360, nanos: 0 }, Duration { seconds: 420, nanos: 0 }, Duration { seconds: 480, nanos: 0 }, Duration { seconds: 540, nanos: 0 }, Duration { seconds: 600, nanos: 0 }, Duration { seconds: 1200, nanos: 0 }, Duration { seconds: 1800, nanos: 0 }, Duration { seconds: 3600, nanos: 0 }, Duration { seconds: 7200, nanos: 0 }] })) }), request_timeout: Some(Duration { seconds: 3, nanos: 0 }), user_agent: Some(Ua { language: Rust, version: \"5.0.0\", platform: \"Windows 10.0.22631\", hostname: \"LAPTOP-IU7BKLKL\" }), metric: Some(Metric { on: false, endpoints: None }), pub_sub: Some(Subscription(Subscription { group: Some(Resource { resource_namespace: \"\", name: \"test\" }), subscriptions: [], fifo: Some(false), receive_batch_size: Some(32), long_polling_timeout: Some(Duration { seconds: 20, nanos: 0 }) })) })\n","level":"ERRO","ts":"2025-04-30T19:40:40.8995167Z","component":"client"}
{"msg":"receive shutdown signal, stop dealing with telemetry command","level":"INFO","ts":"2025-04-30T19:41:00.8535437Z","peer":"172.20.0.47:8081","component":"session"}
{"msg":"send heartbeat to server success, peer=172.20.0.47:8081","level":"DEBG","ts":"2025-04-30T19:41:10.8756944Z","component":"client"}
{"msg":"send heartbeat to server success, peer=localhost:8081","level":"DEBG","ts":"2025-04-30T19:41:10.8771648Z","component":"client"}
{"msg":"send heartbeat to server success, peer=172.20.0.47:8081","level":"DEBG","ts":"2025-04-30T19:41:40.875631Z","component":"client"}
{"msg":"send heartbeat to server success, peer=localhost:8081","level":"DEBG","ts":"2025-04-30T19:41:40.8772986Z","component":"client"}
{"msg":"send heartbeat to server success, peer=172.20.0.47:8081","level":"DEBG","ts":"2025-04-30T19:42:10.8729974Z","component":"client"}
{"msg":"send heartbeat to server success, peer=localhost:8081","level":"DEBG","ts":"2025-04-30T19:42:10.8744632Z","component":"client"}
{"msg":"send heartbeat to server success, peer=172.20.0.47:8081","level":"DEBG","ts":"2025-04-30T19:42:40.874433Z","component":"client"}
{"msg":"send heartbeat to server success, peer=localhost:8081","level":"DEBG","ts":"2025-04-30T19:42:40.8754205Z","component":"client"}
{"msg":"send heartbeat to server success, peer=172.20.0.47:8081","level":"DEBG","ts":"2025-04-30T19:43:10.8733179Z","component":"client"}
{"msg":"send heartbeat to server success, peer=localhost:8081","level":"DEBG","ts":"2025-04-30T19:43:10.8747043Z","component":"client"}
{"msg":"send heartbeat to server success, peer=172.20.0.47:8081","level":"DEBG","ts":"2025-04-30T19:43:40.875442Z","component":"client"}
{"msg":"send heartbeat to server success, peer=localhost:8081","level":"DEBG","ts":"2025-04-30T19:43:40.8765327Z","component":"client"}
{"msg":"send heartbeat to server success, peer=172.20.0.47:8081","level":"DEBG","ts":"2025-04-30T19:44:10.8747469Z","component":"client"}
{"msg":"send heartbeat to server success, peer=localhost:8081","level":"DEBG","ts":"2025-04-30T19:44:10.8758648Z","component":"client"}
{"msg":"send heartbeat to server success, peer=172.20.0.47:8081","level":"DEBG","ts":"2025-04-30T19:44:40.8796296Z","component":"client"}
{"msg":"send heartbeat to server success, peer=localhost:8081","level":"DEBG","ts":"2025-04-30T19:44:40.8811408Z","component":"client"}
{"msg":"send heartbeat to server success, peer=172.20.0.47:8081","level":"DEBG","ts":"2025-04-30T19:45:10.8839732Z","component":"client"}
{"msg":"send heartbeat to server success, peer=localhost:8081","level":"DEBG","ts":"2025-04-30T19:45:10.8850921Z","component":"client"}
{"msg":"send heartbeat to server success, peer=172.20.0.47:8081","level":"DEBG","ts":"2025-04-30T19:45:40.8821906Z","component":"client"}
{"msg":"send heartbeat to server success, peer=localhost:8081","level":"DEBG","ts":"2025-04-30T19:45:40.8833725Z","component":"client"}
{"msg":"send heartbeat to server success, peer=172.20.0.47:8081","level":"DEBG","ts":"2025-04-30T19:46:10.875939Z","component":"client"}
{"msg":"send heartbeat to server success, peer=localhost:8081","level":"DEBG","ts":"2025-04-30T19:46:10.876985Z","component":"client"}
{"msg":"send heartbeat to server success, peer=172.20.0.47:8081","level":"DEBG","ts":"2025-04-30T19:46:40.8812011Z","component":"client"}
{"msg":"send heartbeat to server success, peer=localhost:8081","level":"DEBG","ts":"2025-04-30T19:46:40.8834369Z","component":"client"}
{"msg":"send heartbeat to server success, peer=172.20.0.47:8081","level":"DEBG","ts":"2025-04-30T19:47:10.8829319Z","component":"client"}
{"msg":"send heartbeat to server success, peer=localhost:8081","level":"DEBG","ts":"2025-04-30T19:47:10.8846475Z","component":"client"}
{"msg":"send heartbeat to server success, peer=172.20.0.47:8081","level":"DEBG","ts":"2025-04-30T19:47:40.8721887Z","component":"client"}
{"msg":"send heartbeat to server success, peer=localhost:8081","level":"DEBG","ts":"2025-04-30T19:47:40.8756686Z","component":"client"}
{"msg":"send heartbeat to server success, peer=172.20.0.47:8081","level":"DEBG","ts":"2025-04-30T19:48:10.8789791Z","component":"client"}
{"msg":"send heartbeat to server success, peer=localhost:8081","level":"DEBG","ts":"2025-04-30T19:48:10.881324Z","component":"client"}
{"msg":"send heartbeat to server success, peer=172.20.0.47:8081","level":"DEBG","ts":"2025-04-30T19:48:40.8803983Z","component":"client"}
{"msg":"send heartbeat to server success, peer=localhost:8081","level":"DEBG","ts":"2025-04-30T19:48:40.8823104Z","component":"client"}
{"msg":"send heartbeat to server success, peer=172.20.0.47:8081","level":"DEBG","ts":"2025-04-30T19:49:10.8743281Z","component":"client"}
{"msg":"send heartbeat to server success, peer=localhost:8081","level":"DEBG","ts":"2025-04-30T19:49:10.8789129Z","component":"client"}
{"msg":"send heartbeat to server success, peer=172.20.0.47:8081","level":"DEBG","ts":"2025-04-30T19:49:40.8756562Z","component":"client"}
{"msg":"send heartbeat to server success, peer=localhost:8081","level":"DEBG","ts":"2025-04-30T19:49:40.8775222Z","component":"client"}
{"msg":"send heartbeat to server success, peer=172.20.0.47:8081","level":"DEBG","ts":"2025-04-30T19:50:10.8750351Z","component":"client"}
{"msg":"send heartbeat to server success, peer=localhost:8081","level":"DEBG","ts":"2025-04-30T19:50:10.879282Z","component":"client"}
{"msg":"send heartbeat to server success, peer=172.20.0.47:8081","level":"DEBG","ts":"2025-04-30T19:50:40.8690613Z","component":"client"}
{"msg":"send heartbeat to server success, peer=localhost:8081","level":"DEBG","ts":"2025-04-30T19:50:40.8702054Z","component":"client"}
{"msg":"send heartbeat to server success, peer=172.20.0.47:8081","level":"DEBG","ts":"2025-04-30T19:51:10.8763723Z","component":"client"}
{"msg":"send heartbeat to server success, peer=localhost:8081","level":"DEBG","ts":"2025-04-30T19:51:10.8792889Z","component":"client"}
